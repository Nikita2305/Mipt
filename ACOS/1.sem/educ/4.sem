history commands
+
Размещение программы
Каждая программа - отдельный процесс
У каждого процесса - свой стакан
Размер адресного процесса: 2^(размерность нашего процесса)
Стакан линукса:
|   stack   |
|     \/      |
|           |
|   Libs    |
|           |
|     /\     |
|    heap   |
|   .data    |
|   .podata    |
|   .text    |
|   нулевые странички    |
_________

В винде просто стэк снизу и поэтому чё-то там хуже

В винде функция, которая вызывает main: Winmain32
В линуксе void _start();
Утв: точка входа в readelf -h file указывает на start

Если въебать другой юнит компиляции, то
разные функции из разных - будут рядом, 
Какая-то статическая переменная - далего

Чтобы посмотреть внутренность файлика:
objdump -s far_func.o

gcc -shared -o libGreatLib.so far_func.o
gcc proc.c -L. -libGreatLib // поиск в текущем каталоге
ldd a.out // чё-то не сработало

export LD_LIBRARY_PATH=`pwd`:...
gcc prog.co -no-pie -L. -l...
gcc -shared -o libNAME.so farfunc.o
./a.out
Теперь функция из другой библиотеки очень сильно далеко лежит от мэйна

// ranlib // ?

До этого момента функция в far_func.c была пустой
Теперь сделаем её не тривиальной
void far_func() {
    volatile int x = 123; // запрещает оптимизацию
}

gcc -c far_func.c
gcc -shared -o libNAME.so far_func.o
// Better: gcc -shared -o libNAME.so -fPIC far_func.o
// fPIC - значит позиционно независимый код = заебсиь штука
    // влияет на компиляцию
// -pie - влияет на компановщик
./a.out // там теперь printf("%p", printf);

objdump -d a.out
// На самом деле вместо вызова известного нам printf
    // - вызывается какая-то другая 004505
// Трамплин - вызов какого-то говна по стрёмному адресу
    // а эта функция ищет и вызывает реальный символ
br x17 - goto на функцию котороая там лежит

objdump -s file

HelloWorld на языке ассемблер
    .global main
    .section .text
main:
    // x0 ... x7 - args
    // x0 - ret value
    // printf("Hello\n");
    // x0 = &Hello
    adr x0, Hello // x0 <- PC + Hello
        // Из лекции есть ограничение 21 бит
    b printf // printf -> printf@plt
    ret
    // Плохо - на самом деле printf чёт вернул и мы умерли
        // pc = x30 [lr]
        // program counter
    // Лучше bl printf // x30 = PC + 4
    // однако теперь программа зависла
        // т.к. ret испортился, т.е. прыгает сам на себя
    .section .rodata
Hello: // метка
    .string "Hello\n"

По соглашению о вызовах.
Программа должна сохранить x19..x28, x30
Добавим в начало нашей программы:
    sub sp, sp, 16 // 8 низя, 16 можна 
    str x30, [sp] // сохраняем туда
И в конец:
    ldr x30, [sp]
    add sp, sp, 16

Всё наконец работает.

Как ещё можно использовать память на стэке.
Про функцию сканф:
Допустим нада прочитать одно число

    adr x0, FormatString
    adr 
    bl scanf
FormatString:
    .string "%d" 
