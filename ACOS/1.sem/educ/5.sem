Assembler x86_64
Длинны команд различные.

x86 - семейство архитектур
Раньше Ax, Bx, Cx, Dx - 16 битные регистры
В т.ч. Ax = Ah | Al - разделение на старшие и младшие 8 бит

Дальше значит
EAx, EBx, ECx, EDx - 32bit
RAx, RBx, RCx, RDx - 64bit
Ан-ные префиксбуквы в SP, BP ...
Притом младшие части всё ещё доступны на старших версиях.

В архитектуре ARM можно было действовать только с регистрами
Опааа, а в x86 уже можно лучше:
    add RAX, {RBX | 4 | [RBX + 4*RCX + 10]} // Intel

Ещё такое вот: 10(%RBX, %RCX, 4) = OFFSET(BASE, INDEX, SIZE) // AT&T


Погнали кодить:
    .intel_syntax noprefix // Чтобы add dest addition, а не add addition dest; Чтобы не писать %rax, а rax
        // or .att_syntax - by default
    .text
    .global main    
main:
    sub rsp, 8
    mov rdi, printf_format_string
        // mov rdi, offset printf_format_string
    call printf // Адрес возврата автоматически складывается 
    add rsp, 8
    ret

    .data
printf_format:
    .string "Hello x86" 

Соглашение о вызовах:
64bit:
    RDI, RSI, RDX, RCX, R8, R9 - args
    RAX - return
Именно в этом порядке!!!!

.gdbinit - в папке с кодом
    // gdb server
    // target localhost:1234 remote
    // break main
    // layout src
    // c  // like start

.gdbinit = в корневом каталоге - чтобы прошлый работал
set auto-load ...

Прога выше компилилась с -no-pie
Если его убрать - то не компилится
Какие-то слова про -fPIC or -fPIE

Если убрать -no-pie, то теперь содерж. часть кода:
// load effective address
lea rdi, [rip + printf_format_string]
call printf


Scanf + Printf
lea rdi, [rip + scanf_fromat]
mov rsi, rsp
mov rdx, rsp
add rdx, 4
call scanf

lea rdi, [rip + printf_format]
mov rsi, [rsp]
mov rbx, [rsp + 4]
add rsi, rbx
call printf

Вывело верно.
Глобально - неверно, ведь сканф считал 4 байта, принтф вывел 4 байта
Однако в rsi лежит в старшей части какой-то мусор.
Правильое решение состоит в том, чтобы написать чтобы написать во второй строке второго блока:
    movsxd rsi, [rsp]
    movsxd rbx, [rsp + 4]
    // d = doubleword = 32
    // word = 16
    // q = quadro = 64 

На сервере -no-pie.
Однако более общее решение - lea 
