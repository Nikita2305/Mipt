Лекция 1
Роман Липовский.
The Art of Multiprocessor Programming.

Mutual Exclusion. Задача взаимного исключения.
Первое место, где необходима синхронизация - Аллокаторы.
Разные программы(разные потоки) обращаются к списку с блоками памяти.
Пример с лекции:
Thread1:
100k:
    push
    pop
Thread2:
100k:
    push
    pop
Compile/Exec:
    Разные ошибки ===?==> Проблема с потоками.
    // heam use after free
    // double free

Important: address sanitizer.
Иначе был бы UB без ошибки.

Ситуация push-push
Ситуация pop-pop
Cиту...
Коротко говоря - код выполняется из разных функций построчечно, чередуясь.

Мы хотим, чтобы логически функции были атомарными.
Для этой задачи существуют mutex-ы.
mutex.Lock()
..
    критическая секция.
..
mutex.Unlock()

Гарантируется, что критическая секция будет выполнена последовательно.
std::mutex

Хотя прям так код писать не нужно.
Это нарушает идиому RAII.
std::lock_guard фиксит эту проблему.

Однако unique_lock писать не стоит в этой задаче.
У него более сложная логика, и зачем использовать бОльшую функц-ть.

Замечание: можно сделать отдельный скоуп для lock_guard-а.

Пример, зачем нужен lock_guard:
    1) Исключение.
    2) Просто mutex.lock and unlock - сложнее поддерживать (unlock при каждом return).

Всё ещё наш код не безопасный(захватить mutex или нет - зависит от чела)
В clang есть REQUIRES и GUARDED by mutex.
    -- Чтобы вылетал warning если ты забыл захватить mutex.

Ошибки, которые возникали:
    > race condition - проблема на уровне инварианта вашего кода (ломается структура данных).
    > data race - два потока без синхронизации обращаются к одной ячейке(и где-то на запись), т.е. можно два чтения.


Свойства.
1) Safety. Взаимное исключение. (считай что определение)
Между парными вызовами может находиться только один поток.
- Ничего плохого не произойдёт.

2) Liveness. Свобода от взаимной блокировки
При одновременном доступе к строчке mutex.Lock() - хоть у кого-нибудь она завершится.
- Что-нибудь хорошее произойдёт.

Гарантии прогресса могут нарушаться разными способами.
1) deadlock - никогда не завершится.
2) livelock - лок на сколько-то и хз на сколько(при удачном планировании - разойдутся).

Глобальный прогресс: У каждого когда-нибудь завершится lock().
Голодание - у одного потока никогда не завершится Lock().

Реализация mutex.
Чтобы его написать - требуется написать atomic<int>.
Хотя разницы в памяти между ним и int - нет.
spinlock - задача, где нужно будет написать atomic.

Для начала - протокол для двух потоков.
Мьютекс Петерсона:
    Lock(index)
        want_[index].store(true)
        victim_.store(index)
        while (want_[1-index].load() && victim_.load()){}
        owner_ = index    
    
    Unlock()
        want_[owner_].store(false);
Петерсон решает только для двух потоков.
Tournament - дерево блоков Петерсона.

Запись машинных слов - атомарная операция.
Так что параллельный read и write одного инта - невозможно.

Пример: если заменить atomic -> int в Петерсоне,
то Петерсон сломается. (Пример - запись 0-1).

До этого момента мы использовали модель чередования.
На самом деле всё не совсем так работает.
Чтобы оставаться в этой абстракции, мы и используем atomic.

RMW - read modify write
SpinLock:
    Lock():
        while(locked_.exchange(true)) {}
    Unlock():
        locked.store(false)
Всё стало проще, т.к. появилась атомарная операция у atomic.
Всё ещё не гарантируется глобальный прогресс.

Новая фича. old = atomic.fetch_add(delta).
Идея - TicketLock-a. Два атомика.

Тут был код, но я не успел.

Contention.
Бесконечный while - busy waiting
Чтобы крутиться было приятнее: volatile("pause")
Или можно использовать yield, чтобы сниматься с ядра.
(Потом ты обратно на ядро сядешь)

В домашних работах 
twist::util::SpinWait

Тут был код, но я не успел.

Есть syscall: futex.
atomic:wait
atomic::notify_one 
