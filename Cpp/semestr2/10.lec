Когда мы заменили копирование на move в реализации вектора - мы потеряли безопасность относительно исключений
Т.е. если в какой-то момент move бросил исключение, то половина лежит в одном массиве, половина в другом
Снова мувать(обратно) нельзя, так что Решение:
    AllocTrats::construct(alloc, newarr + i, std::move_if_noexcept(arr[i])); // Если конструктор помечен noexcept
    // В том случае если конструктор копирования отсутствует, то move_if_noexcept в любом случае мувает

Reference qualifiers.
struct S {
    void f() & { // что касается порядка: "const & noxcept override"
        cout << 1
    }
    void f() && {
        cout << 2
    }
}

// Если совсем не ставить &, то работает от обоих видов value

main:
    S s;
    s.f(); // 1
    std::move(s).f(); // 2
    S().f() // 2

Зачем это может быть нужно:
        из временных объектов можно, например, std::move(field)

// Пример из biginteger
    В нашей реализации компилилось a + b = 5
Чтобы этого избежать: S& operator=(const S& s) & {}
// В реальности на это забивают, но это способ решения.

(move семантика всё)


--------Type deduction---------

Ключевое слово auto
"auto" был придуман, чтобы избежать очень длинных возвращаемых типов
Учитывая то, что возвращаемый тип(из ф-ии, например) - известен, то почему бы компилятор сам не подставит
Или, например, тип не такой длинный, но на самом деле выглядит неизвестно как:
for (const std::pair<const std::string, int>& item: my_map) // правильно
for (const std::pair<std::string, int>& item: my_map) // неправильно, будет происходить копирования
Правило хорошего (современного) кодстайла - auto стоит писать.

Ещё пример(пусть нет auto): вы поменяли возвращаемый тип, но не поменяли принимаемое значение.
    1) Не скомпилится - ну ок, поменяем
    2) Скомпилится с неявным кастом - фу, страшно 
Если же есть auto, то ничего страшного не произойдёт, чаще всего

Но свои нюансы есть(например комбинирование с & доступно):
for (auto item : m) // копирование
for (auto& item : m)

Короче тейк в том, что ссылка отбрасывается. Пример:
int& f(int& x) {
    return x;
}
auto y = f(x) // копирование
auto& y = f(x) // верное использование

auto&& - как работает?
    Работает так же, как и в Universal reference(оно этим и является)

Q: Как доказать, что
    auto&& y = f(x) // y = lvalue ref
    auto&& z = std::move(f(x)) // z = rvalue ref

A: конкректно сейчас не сработает, но в общем случае
    template <typename T>
    void f(T) = delete;
В этом же случае поможет след. пункт.

decltype(obj) - возвращает тип объекта (в компайл тайме)
Так что пишем f<decltype(obj)>() к приёму выше и получаеем тип T от компилятора.

int x = 5;
int& y = x
decltype(x) != decltype(y) // т.е. способ отделить ссылку от ориг. объекта

decltype(..) можно использовать вместо любого типа(return value etc)
Также decltype(..)& можно. Эффект сворачивания ссылок?

Также мона decltype(x++) // от выражения
Кстати x++ не исполнится, т.к. в компайле исключительно подставится тип и потеряется x++

Есть некоторые необычные правила касательно использования decltype(..)
if expr is not an identifier:
    - if expr is prvalue of type T, then decltype(expr) is T
    - if expr is lvalue of type T, then decltype(expr) is T&
        decltype(++x) = int&
    - if expr is xvalue of type T, then decltype(expr) is T&&

// Прикол. [decltype(throw 1)* p = nullptr] == [void* p = nullptr]

Вывод типа для возвращаемых типов функций.
Можно писать:
auto f(int& x)
    return x
// вернёт int, & отбросится

auto f(int& x)
    if (x > 5) return x
    else return 0.5
Не компилится, т.к. в компайле не понятно что подставлять в качестве auto. // if constexpr - сработало

Проблема:
template <typename T>
... h(const T& x) { //нельзя ни auto, ни auto&. Т.к. в одном случае теряем &, а во втором всегда подставляем, когда не нужно
    return f(x);
}

Решение:
auto h(const T& x) -> decltype(f(x)) { // способ вычислить возвращаемый тип, зная аргументы

}

Пример применения посдледнего примера.
template <typename Container>
auto get(const Container& container, size_t index) -> decltype (container[index]) {
    return container[index];
}
Крайний случай - vector<bool>, когда обращение по индексу возвращает какой-то прикол(т.е. не int& , а BitReference без ссылки),
    т.е. не понятно - вешать & на auto

// since c++14 - другой способ
decltype(auto) get(...) { // работает как auto, только не отбрасывает &
    return container[index];
}

Также возможно писать: decltype(auto) t = z; // Тут чё-то сломалось в жизни.
//под clang работало как надо но лень было разбираться что именно, лекция 25, ес ч


Structured bindings. (since c++17)
Пример использования:
std::pair<int, std::string> p{5, "abc"};
auto [a, b] = p; // Вау то о чём ты всегда мечтал
    // копии
auto& [a, b] = p // а это ссылки. (Боже как я рад)

Ещё пример: 
for (auto& [key, value]: m) // for map

Tuples. (since c++11)
std::tuple<int, double, std::string> t{1, 5.0, "abcde"};
auto& [a, b, c] = t;

А ваще про тюпл:
auto x = std::get<1>(t) // 1ый элемент, нумерация с нуля
auto x = std::get<double>(t) // ан-ный рез-т, если есть ровно 1 аргумент такого типа
auto x = std::get<float>(t) // для типа, которого нет в тапле, или для которого сущ. >= 2 таких аргументов - СЕ

