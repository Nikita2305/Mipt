Задача 1.
Найдём min_d[1..n] за O(n)
Затем перебирая i = 1..n, (фикс. нек. i)
рассмотрим k = i / min_d[i]. Пусть ans[k] = ANS
Тогда все делители делаятся на t частей.
1) min_d входит со степенью 0
2) min_d входит со степенью 1
..
t+1) min_d входит со степенью t

Любые делители со степенью 0..t-1 уже лежат в ans[k]
Осталось найти делители, которые входят со степенью t.
Это ans[i / min_d[i]^t]

Заметим поиск t и собственно min_d[i]^t - ваще кайф.
Давайте подумаем чё с четными числами.
от 1 до n:
n / 2 - чётных
n / 4 - делятся на 4
...
Просуммируя получим n = кол-во итераций, которое сделаем на чётных числах
Для нечётных всё явно не хуже, а значит суммарно O(n)
При подсчётах сумма действительно ~= 1.6n <= 2n


Задача2.
Найдём min_d для 1..sqrt(n^2 + n). O(n)
А теперь для всех чисел n^2 .. n^2 + n
Запустим тот наш алгоритм Решета Эратосфена за O(n* lnlnn)
Sum[p <= n, p - prime](n / p) = O(n lnln(n))


Задача3.
Сделаем всё как обычно и найдём все простые в отрезке O(sqrt(N))
А потом сделаем указатели для каждого простого
Будем обрабатывать очередное ОКНО длиной sqrt(N)
Суммарно будет потрачено O(sqrt(N) * Primes + nlnlnn) = O(nlnlnn) времени
и O(sqrt(N)) памяти


Задача 5.
Кажется решилась.
Имеем 
F = f0(x) + f1(x)*y + ... + fm(x)*(y^m)
G = g0(x) + g1(x)*y + ... + gm(x)*(y^m)
Посчитаем значения f0...gm в 2n точках: x1...x_2n // [1]

Будем получать F1(y) ... G2n(y)
Затем Ti(y) = Fi(y) * Gi(y) // [2]

Таким образом, поскольку T = t0(x) + t1(x)*y + ... + t2m(x)*(y^2m)
То мы получили значения ti(x) на x1...x_2n.
А значит можем его восстановить // [3]

Асимтотика:
[1] = O(2m * nlogn)
[2] = O(2n * mlogm)
[3] = O(2m * 2nlog2n)
Уложились.


Задача 6.
Сперва представим, что доступны все цифры. А также n - длина половинки. Т.е. N = 2n
Заметим, что в многочлене
(1 + .. + x^9)^n * (1 + .. + x^-9)^n
Свободный член равен Q, а каждая единичка в нём была получена, как x^(a1 + .. + an - b1 - ... - bn)
Т.е. Sum(ai) = Sum(bi)
Откуда Q = искомое число.
Для простоты умножим многочлен на x^9n. Искать будем коэф. при x^9n.
Получим многочлен (1 + .. + x^9) ^ 2n. 
Будем делать бинарное возведение в степень многочлена.
Представим, что 2n = 2^k // для оценки асимптотики
Тогда возведение работает за
2n * log2n +
n * logn +
n/2 * logn/2
...
<= 4n * log2n = O(N logN), что и хотелось.
