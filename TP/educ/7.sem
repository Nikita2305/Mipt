Кросс-компиляция.
Компиляция кода на одной машине, который будет запускаться на другой машине.
(Понадобится на АКОС и задании по ТП)

Сервер - машина, которая исполняет код(например там крутится сайт)
Терминал - мини-комп, который отправляет запросы на сервер(например комп разработчика).

SSH - secure shell - способ приконнектиться к серву или другому устройству.

Короче нихуя не понял - посмотри презентацию.

Если будешь запускать бинарь, нужный для другой архитектуры(Rasp. Pi), то может быть ошибка
No such file or directory.

Decorator - useful! Check.

Adapter pattern.
Дано два интерфейса(ICoolStream and IStream) - которые совершенно похожи, но мы хотим
постепенно менять вхождения одного интерфейса на вхождения другого.

Способ прокинуть объект одного типа как другой. Т.е. ты в 99 методах используешь OldInterface(cool)
А в последнем - NewInterface.(uncool)
Ты делаешь CoolToUncoolAdapter: IStream {
    CoolStream s;
    override get() -> byte[] {
        returnconv(s.read()); // если методы вдруг возвразают разное.
    }
    override put(byte[]) {
        s.set(bytes);
    }
}
От адаптера нужно отказаться в написании проекта по ТП.

Bridge pattern. - ??(вроде что-то очев).
