Паттерн прототипа. 

//Интересно, что не бывает вирт. конструктора и вирт. операторов.

Идея - передаём на вход функции Gun.shot(IBullet*);
Где IBullet - абстрактный класс родителя всех пуль.
Теперь в объекте Gun лежит поле IBullet*.
В классе IBullet теперь создаём метод virtual IBullet* clone(); Который возвращает указатель на аналогичную пулю.
Теперь можно передавать Gun-у пули с разными конфигурациями и разных типов. 

Почему не оператор присваивания? - Вопрос. На самом деле чел и сам не сам знает зачем это нада.

Проблема - если пуля сразу отрисуется, то её сразу придётся где-то рисовать, но она же прототип, и не стреляет.

Поразбираемся с этим паттерном.
Shallow copy - поверхностное копирование(например вектор, указатель на память массива скопируется точно)
Deep copy - глубокое копирование(создание нового массива и возвращение указателя на него)
Однако есть много-много других способов.

Где мы можем увидеть прототипы?
JavaScript. Класс - это прототип. Мап = {name: type, name: type}
Ничё не понял, но очень интересно.

Singleton - класс с ровно 1 экземпляром. Наследоваться низя, а значит низя Unit-тесты.
Почему низя наследоваться? Потому что конструктор родителя приватный.

Идея Unit-тестов(для каждой функции) - создаём
ClassStub: Class{...}; //т.е. Stub - заглушка.
И класс ClassStub будет возвращать разные роды output-ов(ака ошибки и т.п.)

Идея решения проблемы - делаем публичный конструктор. И создаём DbStub.
В функции ProcessData(Db* dp){ //принимаем по указ. (раньше вообще не обращались)
    db->request(); //for unit
}

Теперь для Unit тестов вызываем ProcessData(DbStub.GetDb())
В дефолт коде: ProcessData(Db.GetDb())

Ещё круче, в качестве значения по умолчанию Db* db = GetDb(); - теперь мы умеем не менять код в main()
А просто менять значение по умолчанию(или вроде как менять сам синглтон / функцию)

