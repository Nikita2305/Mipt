OS.

Kernel(ядро) - обеспечивает изолированную работу многих программ на небольшом количестве ядер(core).
Файловая система также предоставляется ядром.
Ядро предоставляет InterProcessCommunication(IPC) - взаимодействие м/у процессами(которые напрямую не общаются).
Также обеспечаивет работу внешних hardware устройств.

Системные вызовы. (Source Call)
userspace - то, где работает твоя программа
kernelspace - то, что делает ядро
SourceCall - задание из userspace в kernelspace;
Signal - позволяет ядру оповестить вашу программу о чём-то.
Например Сtrl+C - signal убития приложения(стандартный).

Виртуальная память - абстракция, которую предоставляет ядро вашей программе, для использования 
Т.е. есть отображение () из реальной памяти в виртуальную память.
   
Вся память (2^64 байтиков) делится на страницы по 4 КБайта
Память выделяется страницами.

nmap - низкоуровневая альтернатива malloc.

Linux - ядро(Kernel).
Операционки aka Ubuntu используют ядро Linux.
По факту OS отличаются софтом, напр. bash

Open SSL - крипто-опенсорс-штука, которая разрабатывается каким-то одиноким челом(+мем)
----

Docker.
Идея - изоляция приложений друг от друга
Основная сущность - контэйнер, в котором лежит операционка и набор программ и инструментов.
Грубо говоря - на Linux это удобная обёртка над Namespace;
Docker использует наше же ядро, выделяя на нём несколько независимых контейнеров.
Также он разделяет ресурсы между контейнерами так, как хочется.
Docker предоставляет удобный способ создавать контейнеры.

Использование.
В директории с проектом:
Создаём файл Dockerfile / На манер CMakeLists.txt
С контентом от docs.docker.com/get-started/02_our_app/
После написания docker build -t image-name .
Получим образ нашей программы, из которого потом создадим контейнер.
В том числе, можно наслаивать образы друг поверх друга. Когда мы пишем from node::12-unix_distr
    Мы наслаиваем наш образ на этот.

Архитектура Docker.
Client + Daemon(сервер).
В клиенте ток команды, на серве же создаются контейнеры и всякое такое.
Сервер поднимается где-нибудь например на общем рабочем сервере.
Картинка на .../get-started/overview/ , например.

Хочется, чтобы каждый контейнер имел свой ip.
docker run -dp 3000:3000 image-name // поднимаем приложение

Docker создаёт временную файловую систему, что является проблемой.
Чтобы исправить эту проблему,
docker volume create todo-dp // виртуальный жёсткий диск.
Далее можно docker run ... -v todo-db:/etc/todos image-name
Т.е. привязываем к жёсткому диску папку из host-хранилища.

Чтобы тестить чё-нить локально - подними docker и работай там. 
Примонтируй папку проекта к жёсткому диску поднятого контейнера.
    /06_bind_mounts/
Замечание: если нужно другое ядро - используй VirtualBox


