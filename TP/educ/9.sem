Новый сем.

В порядке убывания приоритетности.
Хранение по значению
Unique_ptr - один владелец
Shared_ptr - много объектов владеют(невозможно чётко определить владельца)
Weak_ptr + Shared_ptr - в случаях цикл. зависимостей?

Паттерны - вернёмся.

Паттерн - стратегия(Strategy).
Есть два класса - лучник и мечник. Пусть они по разному атакуют. И у них ваще абилки(много допустим).
В класс юнит кладём объект IStrategy*.
IStrategy {
    virt void attack();
}

Т.е. вынесли возможность кастомизации этой функции в отдельный класс.

Паттерн - Шаблонный метод(TemplateMethod)
class Algo {
    ...operator() (Data d) {
        .... // очень многоэтапный алгоритм
        d1 = S1(d)
        d2 = S2(d1)
        ..
        return dn;
    }

    virtual S1(){
        //default
    }
    ...
}

Насlедуем
class QuqAlgo: Algo {
    virtual S1(){
        //remake
    }
}

Паттерн - Chain Of Responsibility.
Имеем интерфейс, в котором кто-то ответственен за обработку клика.
IHandler - обёртка для каждого элемента в цепочке.
class IHandler{
    handle() {...}
    Handler* next;
    ...
}
В некотором смысле list для Обработчиков.



Continious Integration(CI).
Короче суть в том, чтобы запустить тесты на различных системах.
Чтобы не покупать системы, можно в облаке арендовать чуть-чуть места.
В нашем задании Github: Actions
Делаем скрипт yml в папке .github/workflows - специальный язык.

on: - когда запускать скрипт
jobs: - какие шаги делать

Смотреть в АхтямовПавел на github / PatternsCollection
