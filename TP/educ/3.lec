Закон Деметры - принцип минимального знания.
Объект А не должен иметь непоср. доступа к объекту С, если у объекта А есть доступ к промежуточному объекту В,
а у объекта В есть доступ к объекту С

YAGNI - you ain't gonna need it
	Не делай того, что никому не нужно(что тебе никогда не понадобится)

DRY - don't repeat yourself
	в случае нахождения ошибки - проще её исправить в одном месте
DRY = DIE = duplication is evil

KISS - keep it simple, stupid
	нет смысла делать что-то красивое, ради того, чтобы сделать что-то красивое

*******Методы отладки ПО********

Процесс отладки. Основные этапы.
- Воспроизведение дефекта (по описанию дефекта пользователем)
- Анализ дефекта
- Дизайн исправления дефекта
- Исправлние дефекта
	В дополнение в проектах:
- Валидация исправления
- Интеграция исправления в код или целевую систему
	"У меня работает" - т.е. на машине работает, а у клиента нет

Чуть подробнее о каждом.

Воспроизведение деффекта.
	Необходимости:
	- Точное соответствие версии (с точностью до билда).
		Решение: использование логов.
	- Точное соответствие настроек (вдруг ошибка наблюдается только в конкретном случае машины пользователя)
		Решение: использование логов, с целью собирать данные ПК юзера.
	- Данные, на которых наблюдалась проблема.
		Нельзя просто логировать персональные данные юзера - это не хорошо:(
		Решение: Можно данные обфусцировать - например строку переводить в хэш.
		Часто пользователь не согласится с отправкой персональных данных.
	- Точное воспроизведение действий / сценария
		Решение: логирование всех действий юзера.
			Это также такая себе идея, т.к. юзер не согласится
				Решение: логировать вызов функций, а не действий пользователя
			Большой объём данных.
				Решение: сохранение 5 минут логов.
				Другое решение: в момент когда пользователь получает ошибку - попросить его
						повторить действия со вкл. логами.

Анализ дефекта.
	Важные аспекты:
	- Поиск root-cause
		В чём корневая проблема?
		В больших проектах поиск root-cause - очень сложная задача, так что иногда решают следствие:(
	- Условия возникновения:
		Чётко сформулированные критерии:
		Полные, однозначные.
		Ахтунг: обращать внимание на настройки по умолчанию, т.к. на польз. машине они могут быть поменяны,
			а разработчик даже не думает об этой настройке, как о "переменной в уравнении"
		
		Плохой пример условий возникновения: ошибка при данных настройках возникает каждый второй раз.
			Пример проблемы, скрывающейся: переполняется кэш.
			Решение: увеличить кэш в 100 раз
			Валидация решения: запустили 10 раз, ошибка не возникла.
			Реальность: ошибка возникает теперь каждый 200-ый раз, проблема не решена.
	- Область повреждения:
		Вопросы которые стоит себе задать:
			Что именно сломано?
			Какой основной сценарий(ии)? - сообщён пользователем.
			Есть ли дополнительные сценарии? - поиск разрабом.
			Может ли ещё на что-то повлиять? - вдруг исправление бага убъёт код другого человека
	- Кто привнёс?
		Т.е. как ошибка смогла дойти до юзера - разраб перегружен, тестировщик лох,
							на малой группе плохо проверили - исправить алгоритм провер.
	- В какой версии появилась?
		Т.е. поддержка старых версий - стоит выпускать поддержку старых версий редко, т.к. 
		иногда обновление - это большие сложности.

Дизайн исправления дефекта
	- Технический дизайн, т.е. как мы поменяем код в конкр. месте(ошибка типа поменяли знак минуса)
	- Архитектурныей, т.е. бизнес - логика проекта неверна(вы думали что мир как-то по другому работает)
	- Технологический - например изменение провайдера, который плохо присылает смски
			Переход на другую технологию.
	
	- Ревью и согласование решений - обязательно!

Исправлние дефекта.
	- Не привнести новые дефекты
		Анекдот: было 2 ошибки, исправили 2 ошибки, нашли ещё 2 ошибки, стало 5 ошибок.
		Хаха 2 + 2 = 5
	- Ожидаемое поведение и логика
		Ожидаемое для пользователя, а не для вас - т.е. чтобы юзер понял то, что произошло
	- Костыли и грязные хаки
		Когда решили проблему так, как получилось.
	- Документирование

Валидация исправления.
	- Проверка исходного сценария
	- Проверка всех сценариев возникновения
	- Проверка связанных сценариев
	- Полноценное тестирование системы.
		Night build - сборка проекта и прогон теста ночью, чтобы не тратить время рабочее.

Интергация исправления в код или целевую систему.
	- Слитие со стволом.
	- Проверка сборки и работоспособности
	- Деплоинг новой версии в целевую систему - процесс установки вашего софта на конкр. систему в боевой режим
	- Обновление серверной/пользовательской систем
	- Документация

Доп. валидации после интеграции
	- Проверка сценариев ошибки
	- Проверка связанных сценариев
	- Полноценная проверка системы
	- Проверка устойчивости работоспособности всех версий
	- Проверка корректности обновления.
