Антипаттерны(2 лекция)
В ООП(продолжение).
    - Приватизация
        Сокрытие функциональности в приватной части, что затрудняет расширение в наследниках
        Open-closed principe запрещает изменение(речь о переносе в нужное время из приватной части в публ.)
        Нужно балансировать между инкапсуляцией и полнотой публичного интерфейса для расширяемости
    - Френд-зона
        Неуместное использование friend (злоупотребление).
        Если 30 френдов обращаются к чему-то в привате, то почему это не в публичном интерфейсе
    - Каша из интерфейсов
        Объединение двух интерфейсов, предварительно разделённых, в один(имеется ввиду сливание, а не 
            наследование класса от неск. интерфейсов)
    - Висящие концы
        Интерфейс, большинство методов которого бессмысленные или являются пустышками.
            // Пример countSmth(): return 0;
        ХУЖЕ сделать функцию пустой, чем НЕ ОБЪЯВИТЬ почти
            Предложение - пустые функции бросают исключение
    - Заглушка
        Попытка натянуть малоподходящий по смыслу интерфейс на класс
        Пример class Music: class Video {} // With no 
        Лучше: class Music: interface Playable {}, class Video: interface Playable, HasVisuals {}

В кодировании.
    - Ненужная сложность
        Использование избыточно сложных решений для тривиальных задач
        "Более сложный код - более ошибкоопасен". (English)
    - Действие на расстоянии
        Взаимодействие между широко разнесёнными частями системы
        Тейк в том, чтобы обращаться к фасаду модуля, а не конкретным классам и реализациям внутри него
    - Накопить и запустить
        Установка параметров подпрограмм в глобальных переменных
        Аргумент 1: Тяжело читаем
        Аргумент 2: Непереносимость модуля(нужно и с глобалами переносить)
    - Слепая вера
        Ситуация, когда после исправления ошибки не проведены все стадии тестировки исправленного куска
    - Лодочный якорь
        Сохранение неиспользуемой части программы
        Хранить код, который никогда не будет использован(пример - драйвера к магнитным дисководам в 2к21)
    - Активное ожидание
        Потребление ресурса в процессе ожидания выполнения запроса, путём выполнения проверок, чтений файлов и.т.д.
        Асинхронного программирование вам в помощь.
        Пример - запросы клиента к серверу раз в 0.001 секунды с ожиданием ответа YES и response.
    - Кэширование ошибки
        Несбрасывания флага ошибки после её обработки.
        Понятно, что плохо
    - Воняющий подгузник
        Сброс флага ошибки без её обработки или передачи на уровень выше
    - Проверка типа вместо интерфейса
        Проверка на специфический тип, вместо требуемого определённого интерфейса
    - Инерация кода
        Избыточное ограничение системы из-за подразумевания постоянной её работы в других частях системы
        Т.е. напр. ограничить качество видео 360р, чтобы это работало и на телефонах с медленным интернетом
    - Кодирование путём исключения
        Добавление нового кода для каждого нового случая
    - Таинственный код
        Использование аббревиатур/сокращений в именах сущностей вместо логичных имён
    - Жёсткое кодирование
        Внедрение предположений в слишком большое количество точек в системе
        Ну короче модуль с малой гибкостью, где пользователь очень ограничен в способностях
    - Мягкое кодирование
        Настраивается вообще всё, что усложняет конфигурирование для пользователя
    Стоит искать баланс между двумя последними пунктами, в зависимости от конкретного потребителя
    - Поток лавы(TODO: сравнить с Лодочным Якорем)
        Сохранение нежелательного кода из-за боязни последствий его удаления/исправления
        Например в API есть ошибка, которую боятся исправлять, т.к. уже овердофига юзеров полагаются
        на именно такое поведение API
        Замечание:
            Иногда имеет смысл, когда есть значительное количество более приоритетных задач
    - Волшебные числа
        Использование числовых констант без объяснения их смысла
        Заводим константу и даём ей осмысленное название. Также легко менять.
    - Процедурный код
        Нафигачили классов, а потом начали использовать исключительно функциональный подход
    - Спагетти-код
        Код с чрезмерно запутанным порядком исполнения
    - Лазанья код (подчёркивает антипаттерн Ненужная сложность)
        Использование неоправданно большого числа уровней абстракции
    - Равиоли-код
        Объекты настолько склеены между собой, что рефакторинг становится невозможным
        Нарушен принцип High cohesion / low coupling
    - Мыльный пузырь
        Объёкт, инициализированный мусором(или не иниц.), который слишком долго ведёт себя как корректный
        Пример - вычисление каких-то параметров объекта только перед тем как они вам понадобятся
            Вопрос(риторический): А вдруг он понадобится кому-то кроме вас до этого, ведь неочев, что поля пустые
    - Мьютексный ад
        Внедрение слишком большого количества примитивов синхронизации в код
        // Используем минимальное количество инструментов, которое нужно, чтобы решить задачу
    - (Мета-)шаблонный рак
        Неадекватное применение шаблонов везде, где это только получилось, а не где это было необходимо
