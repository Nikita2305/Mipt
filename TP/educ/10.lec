Антипаттерны (часть 3)

Методологические антипаттерны.
- Использование паттернов
    Кто-то считает, что если вы используетее паттерны, значит решаете проблему, а значит что-то уже пошло не так
    Ибо проблемы не должно быть вообще.
- Копирование-вставка
    Когда нужно было написать более общий код. Плохая сторона - тяжело менять, например.
- Дефакторинг
    Процесс уничтожения функциональности и замена её документацией.
    Когда не запилил функционал, но сложил на юзера в документации алгоритм достижения результата.
- Зололтой молоток
    Использование любимого решения везде, где только получилось
- Фактор невероятности
    Гипотеза о том, что известная ошибка не проявится.
    Утв-е: некритичную ошибку отложить на нек. время можно, но в итоге стоит исправить.
- Преждевременная оптимизация
    Оптимизация при недостаточной информации.
    Перед тем, как приступать к оптимизации стоит оценить, какой модуль системы действительно стоит оптимизировать
- Метод подбора
    Софт разрабатывается путём небольших изменений.
    Стоит быть уверенным в своём коде перед тем как его засылать.
- Изобретение велосипеда
    Создание с нуля того, для чего уже есть готовое решение
    Контрпример - иногда можно изобретать свой велосипед, когда существующий - платный(о внешнем софте)
- Изобретение квадратного колеса
    Создание плохого решения, когда существует хорошее.
- Самоуничтожение
    Когда мелкая ошибка приводит к фатальным результатам.
    Стоит правильно проектировать и изолировать подсистемы.
- Два тоннеля
    Необоснованное вынесение новой функциональности в отдельное приложение.
- Коммит - убийца
    Внесение изменений без проерки влияния на другие части программы.
    Система перед выпуском проходит полное тестирование

Управление конфигурацией
- Ад зависимостей. (DLL-hell in Windows)
    Разрастание зависимостей до такого уровня, что раздельная установка программ из пакета становится сложной
    Пример: программы А и Б используют библиотеку Lib. После удаления программы А - удалять поставленную Lib?
        1) Да - ну тогда Б потеряет Lib и перестанет работать
        2) Нет - но пользователь очевидно ожидает удаления(имея ввиду, если Б вдруг не оказалось)
    Пакетные менеджеры(используются в Unix) - решение этой проблемы

Прочие антипаттерны
- Дым и зеркала
    Демонстрация того, как будут работать ненаписанные функции
    Правильным решением подразумевается чёткая документация и реализация строго по ней.
- Раздувание ПО
    Разрешение последующим версиям использовать всё больше и больше ресурсов.
    Пользователь может быть не готов к увеличению потребления ресурсов(финансово) [о бизнес разработке]
- Функции для галочки
    Превращение программы в "сборную солянку" плохо работающих и не связанных между собой функций
    Пример про банковское приложение, присылающее пуши про пробке на районе:)


--- CI/CD ---
Кстати CI / CD / CD

CI - Continious Integration - постоянная интеграция внесённых изменений в существующую систему
    Т.е. автоматизированно: разраб коммитит, затем прогоняются тесты и т.п.
CD - Continious Delivery
    В систему CI добавлена функция собирания release версии, которая в ручную должна быть залита в прод.
CD - Continious Deployment
    Теперь release версия едет автоматически в прод.

Т.е. Это три альтернативы, с разными степенями автоматизации.


--- ПРИМЕР, как это работает у лектора в 1С. -----

1) Этап проектирования
    - Идея
    - Первое обсуждение (сбор команды)
    - Проектный документ (шаблон под него есть, напр.)
        Объективно расскажем чё да как и почему это нужно.
    - Несколько итераций работы над проектным документом
    - Финальное согласование.

2) Этап реализации
    - Отдельная ветка для каждой задачи
    - Локальная реализация и тестирование
    - Поднятие версии - нвн создание версии build-а и компиль проекта?
    - Интеграционная сборка в СI
    - Интеграционная сборка с полными тестами (реальные тесты с эмуляцией кликов, например)

3) Этап сдачи задачи
    - Код ревью
    - Исправление замечаний
    - Документация по задаче
    - Отправка задачи на независимую проверку (сборка + документация)
    - Исправлние замечание
    - Получение финального разрешения на влития ветки в ствол.
    - Влитие и закрытие задачи.

4) Подготовка к выпуску версии
    - Введение моратория на разработку (во время моратория запрещено заниматься разработкой непоср-но)
    - Проверка "висящих" задач
    - Влитие оставшихся задач
    - Введение моратория на изменения в ствол
    - Сборка кандидата в релиз
    - Тестирование (автом. и ручное)
    - Исправление ошибок, повтор тестирования
    - Релиз кандидата
Замечание: моратории могут и не вводиться для минорных версий
    
