Техники отладки ПО.

Стандартные:
- Трассировка: Запуск программ в отладчике
    - Софтверный - в IDE дебуг
    - Железный (хардварный) - подключение платы с проверкой настроек
    - Удалённый дебаггер - отладка удалённого серва
- Логирование:
    - Работы системы. То какие действия происходили в реале.
    - Программного кода. То какие функции вызывались.
- Анализ программного кода без исполнения программы:
    - Метод пристального взгляда
    - Статические анализаторы - делают предупреждения на конкретных местах в коде.
        Шаблоны тяжело анализировать, например
- Анализ поведения системы
    - Упрощение ошибочного сценария до тривиального, без потери ошибочности
    - Ограничение объёма данных
    - Упрощение данных / запроса
- UNIT - тестирование
    Написание тестов на каждую конкретную функцию.
- Прототипирование
    Проблема возникает, если воспроизведение сценария занимает много времени.
    Решение: создание мини-софта, который восстанавливает сценарий вплоть до ключевого момента.
- Отладка с помощью дампов.
    Дамп - файл, где сохранено состояние оперативной памяти вашей программы.
    Этот файл можно открыть и посмотреть состояние программы.
    Зачем? А вдруг у юзера чё-то говнится, а у тебя нет. Он присылает тебе дамп, ты восстанавливаешь это говно.
- Отладка с помощью перехватов.
    Позволяет олтследить вызовы функций.
- Профилирование кода.
    Некоторый софт в IDE, в котором можно видеть потребляемые ресурсы.
    Помогают в решении проблем с оптимизацией.
    - Помогает ловить и обосновывать зависание системы
    - Помогает ловить утечки памяти
- Выполнение кода в другой среде.
- Отладка методом RPC
    (remote procedure call) - т.е. вызов функций на удалённом устройстве с возвратом ответа
- Отладка путём анализа документации, проектных документов и т.д.
    Т.е. если ошибка на уровне понимания алгоритма работы с внешними системами.
- Отладка трансляцией кода
    - Трансляция "вниз" (Просто делать)
        Получаем, например, ассемблерный код, который вдруг можно будет проще понять
    - Трансляция "вверх" (Сложно делать)
        Получаем С++ шный код, который куда проще анализировать.
- Отладка разработкой интерпретатора
    - Каво-таво
- Метод индукции (от частного к общему).
    - Подставляем маленькие ситуации
- Метод дедукции (от общего к частному)
    - Уменьшаем область поиска ошибки.
- Обратное движение по алгоритму.
    - Пусть ошибка в строке X, посмотрим какие строки формируют результат в строке X, это: X - k1, X - k2, ...
    и т.д.

Пример: с Пунто-свитчером - заменителем инглиша на рашан.
 
