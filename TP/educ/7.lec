25/03 - промежуточная контрольная.
Даёт 30% от оценки.
Содержание - все вопросы, осмотренные на лекциях.

Процесс разработки ПО(3).
Методологии разработки ПО - Подход к организации работы/

- Выбор методолгии зависит от многих параметров(как внутренних, так и внешних)
    - Особенности проекта
        - Сроки
        - Бюджет
        - Вариант поставки
        - Требования к качеству
        - ...
    - Особенности команды
    - Особенности заказчика

Примеры методолгий разработки ПО
- Какадная (она же Waterfall)
- V-модель
- Инкрементная модель
- Спиральная модель
- RAD-модель
- Семейство гибких методолгий(adjile?)
    - Scrum
    - Kanban
    - Lean
    ...


1) Каскадная модель
Разбиваем процесс на стадии. Последовательно их проходим. Стадия не начинается, пока не закончится предыдущ.
- Чёткие:
    - Сроки
    - Стоимость
    - Результат
Т.е. знаем промеж. результат в любой момент. - и это плюс.
- Но есть и минусы:
    Совершенно не гибкая модель. Если заказчик придёт с изменениями, то придётся перепиливать всё заново.
    При больших проектах это нежизнеспособно, т.к. там часто процессы идут параллельно.
Как это визуализировать - диаграмма Ганта.

2) V - модель.
Проект снова разбивается на некоторые этапы, которые затем рисуются в форме буквы V.
Левая ветвь - верификация, правая - валидация.
Этапы с левой ветви связаны с этапами правой(ака биекция).

Верификация:
    - Общая концепция
    - Требования бизнеса
    - Функциональные требования
    - Архитектура
    - Реализация
Валидация:
    - Приёмо-сдаточное тестирование
    - Функциональное тестирование
    - Интеграционное тестирование 
    - Модульное тестирование

Т.е. сначала идут процессы верификации(придумывание идеи проекта)
и тут же придумываются тесты соответствующего уровня абстракции,
потом внизу буквы V - кодирование, затем тестирование по тем тестам, которые составлены на теор. этапе.

Результат: получение проекта гарантированно хорошего качеста.
Система вновь линейна, так что тайм-менеджмент фиксирован.
Хорошо подходит, когда задания хорошо фиксированы(часто применимо в случае Военно-промышл. комплекса).

Минусы:
    - некруто применять модель для малых проектов(пару месяцев).
    - негибкая к изменениям требований походу(т.к. помимо плана нужно менять ещё и тесты даже).

3) Инкрементная модель.
Снова делим разработку на некоторые этапы(инкременты),
где на каждом инкременте добавляется некоторый уровень функциональности.
На каждом этапе не обязательно рабочий продукт.
На каждом этапе:
    - Определение треборваний
    - Проектирование
    - Реализация
    - Внедрение
    - Тестирование
Но суть в том, что содержание инкрементов планируется в самом начале.
Данная модель более толерантна к изменениям, но не полностью - некст лучше(?)

4) Итерационная модель.
Каждый этап - база для следующей итерации.
Важный момент - каждая версия полностью работоспособна.
После выпуска очередной версии - проводим анализ версии и (опционально) собираем фидбэк
для формирования требований и планов для следующей версии.
Вполне толерантна к изменениям.
Итерации стоит делать значительными, чтобы анализ данных не занимал значительную часть времени.
Иногда в одно и то же время происходит сбор фидбека и выпуск новой версии на основе фидбека пред-предыдущей.

5) Спиральная модель.
Большое внимание уделяется рискам.
Внутренние риски - увольнение сотрудника.
Внешние риска - кончилось финансирование.
Bus factor - на сколько замедлится разработка продукта, если ключевого сотрудника собъёт автобус.

Концепция(рисуется спиралью) - делим на этапы, после решения каждой подзадачи оцениваем риски.
Если риски норм, то можем нарастить на нашу улитку новую спираль.

6) RAD - модель.
Rapid Application Development Model - самый быстрый способ решения задачи.
- Делим задачи на модули, которы разрабатывают разные команды.
- Жёстко ограниченное время
- Интеграция отедльных модулей в один проект
- Использование инструментов автоматической сборки и генерации кода

Этапы:
    - Бизнес моделирование
    - Анализ и создание модели данных
    - Анализ и создание моделей процессы 
    - Автоматическая сборка приложения и тестирование

Работает хорошо на несложных идейно проектах, но объёмных технически.

7) Семейство AGILE - гибких метдолгий
- Семейство гибких методолгий разработки
- Короткие итерации
- Разные метрики качества работы
- Много разных конкретных подходов
// AGILE - манифест.
ЛЮДИ и ВЗАИМОДЕЙСТВИЕ важнее процессов и инструментов.
РАБОТАЮЩИЙ ПРОДУКТ важнее документации
СОТРУДНИЧЕСТВО С ЗАКАЗЧИКОМ важнее условий контракта
ГОТОВНОСТЬ К ИЗМЕНЕНИЯМ важнее первоначального плана
// Суть последнего - очень тонкая, т.е. без плана не живём, измнения нужно принимать осторожно и с пониманием.
Суть в том, чтобы откинуть формализм, кажется

SCRUM.
Создаём спринт(1-4 недели).
Создаём Product backlog - что хотим от спринта. Выделяем приоритетные цели(продукт овнер это делает).
Команда выделяет задачи, которые требуются от данного спринта(и каждому выделяется какая-то часть проекта).
Далее спринт и дэйлик каждый день - от каждого разработчика: чо как прошло и какие планы.
Затем после спринта подводим результаты, оценивая загруженность каждого разраба и т.п.

Подходит для малых команд, где легко строить тесное взаимодействие.

KANBAN.
- Делим доску на горизонтальные прямые, где каждая прямая отвечает какой-то команде.
- По вертикали разные статусы выполнения задачи.
- Добавляем карточки(цели) на доску и двигаем их справа налево.
- Цель - двигать цели как можно быстрее в рамках каждой горизонтали.

Подходит для небольших досок, чтобы всё было читаемо.
По легенде - пришло из Тойоты(Япония)
