Паттерны.

pImpl - programming tecnique.
Проблема - не хочется в .h файле видеть приватную часть.

Предложение - в классе С храним:
struct impl;
std::unique_ptr<impl> pImpl;

А в .cpp
struct widget::impl {
    // implementation details
}
И реализация методов класса С

Чтобы проинициализировать pImpl - в конструкторе изначального класса С.
Проблема - не дружит с наследованием

Паттерн - Итератор?

Паттерн - Команда(Command pattern)
ICommand() {
    do()
    undo()
}

Наследники - Fill / Paint / Select
Чтобы сделать undo() - нужно в команду сохранить то, что он потёрла.
serialize() - способ превратить объект в байты(для RPC, например)
deserialize() - способ превратить байты в объект

Паттерн - Медиатор(Mediator pattern). По факту god-object.
Имеем сильную связь между модулями. Не понятно, как чё устроено.
Помогает в случае изменения сигнатур(и других штук): связи только между медиатором и изменяемым объектом.
Предложение: Создаём медиатор, который связывает все вершины. 
Создан для исправления проектов, которым уже плохо.

Паттерн - Обзёрвер(Observer pattern)
Не хочется, чтобы Unit зависел от Skeleton(например, если умерли рядом с некромантом, то спавним скелета)
Хочется делать зависимость от Скелета к Unit, т.к. последний - базовый класс, в котором изменения недопустимы.
Тогда в Unit-е создаём список подписчиков, которым отправляем событие о его смерти
Или даже иметь vector<std::function>
Также имеем функцию notify() в сабскрайбере. Кажется можно создать класс Event(). ondeath.
И в методе die(): ondeath -> notifyAll(); 
Чтобы сделать отписку: subscribe вернёт handle(билет). И чтобы отписать можно вызвать describe(билет).

Паттерн - State Machine
Для каждого состояния - полиморфизм IState для перехода из состояния в состояние
